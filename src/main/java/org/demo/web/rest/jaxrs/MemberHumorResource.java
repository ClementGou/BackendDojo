/*
 * Created on 2018-06-07 ( Time 14:46:48 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package org.demo.web.rest.jaxrs;

import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

//--- Entities
import org.demo.data.record.MemberHumorRecord;
import org.demo.data.record.listitem.MemberHumorListItem;
//--- Services 
import org.demo.persistence.MemberHumorPersistence;
// import org.demo.business.service.impl.MemberHumorServiceImpl;
import org.demo.persistence.commons.PersistenceServiceProvider;
import org.demo.web.rest.commons.AbstractResourceController;

/**
 * JAXRS Jersey controller for 'MemberHumor' management.
 */
@Path("/memberHumor")
public class MemberHumorResource extends AbstractResourceController {

	private MemberHumorPersistence memberHumorService = PersistenceServiceProvider.getService(
			MemberHumorPersistence.class);

	/**
	 * Constructor
	 */
	public MemberHumorResource() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all memberHumor entities.
	 * 
	 * @return list with all entities found
	 */
	@GET
	@Produces({ MediaType.APPLICATION_JSON })
	public List<MemberHumorRecord> findAll() {
		logger.info("findAll()...");
		return memberHumorService.findAll();
	}

	/**
	 * Retrieves a memberHumor using the given id (id + date determined by user).
	 * 
	 * @param memberId
	 *            memberId
	 * @param day
	 *            day
	 * @return 200 + body if found, 404 if not found
	 */
	@GET
	@Path("{memberId}/{day}")
	@Produces({ MediaType.APPLICATION_JSON })
	public Response findById(@PathParam("memberId") Integer memberId, @PathParam("day") Date day) {
		logger.info("findById(" + memberId + day + ")...");
		MemberHumorRecord record = memberHumorService.findById(memberId, day);
		if (record != null) {
			return Response.ok(record).build();
		} else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Retrieves a memberHumor using the given (id + actual date).
	 * 
	 * @param memberId
	 *            memberId
	 *
	 * @return 200 + body if found, 404 if not found
	 */
	@GET
	@Path("{memberId}")
	@Produces({ MediaType.APPLICATION_JSON })
	public Response findById(@PathParam("memberId") Integer memberId) {
		Date day = new Date();
		logger.info("findById(" + memberId + ", today: " + day + ")...");
		MemberHumorRecord record = memberHumorService.findById(memberId, day);
		if (record != null) {
			return Response.ok(record).build();
		} else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Creates a new memberHumor.
	 * 
	 * @param memberHumor
	 *            memberHumor
	 * @return 201 with body if created, 409 conflict if duplicate key
	 */
	@POST
	@Consumes({ MediaType.APPLICATION_JSON })
	@Produces({ MediaType.APPLICATION_JSON })
	public Response create(MemberHumorRecord memberHumor) {
		logger.info("create()...");
		if (memberHumorService.exists(memberHumor)) {
			logger.info("create() : already exists -> conflict");
			return Response.status(Status.CONFLICT).build();
		} else {
			logger.info("create() : doesn't exist -> create");
			MemberHumorRecord record = memberHumorService.create(memberHumor);
			return Response.status(Status.CREATED).entity(record).build();
		}
	}

	// ------------------------------------------------------------
	/**
	 * Updates the memberHumor identified by the given id
	 * 
	 * @param memberHumor
	 *            memberHumor entity
	 * @param memberId
	 *            memberId
	 * @param day
	 *            day
	 * @return 200 if found and updated, 404 if not found
	 */
	@PUT
	@Path("{memberId}/{day}")
	@Consumes({ MediaType.APPLICATION_JSON })
	@Produces({ MediaType.APPLICATION_JSON })
	// public MemberHumorRecord update(MemberHumorRecord memberHumor,
	// @PathParam("memberId") Integer memberId, @PathParam("day") Date day) {
	public Response update(MemberHumorRecord memberHumor, @PathParam("memberId") Integer memberId,
			@PathParam("day") Date day) {
		logger.info("update()...");
		// force the id (use the id provided by the URL)
		memberHumor.setMemberId(memberId);
		memberHumor.setDay(day);
		boolean updated = memberHumorService.update(memberHumor);
		if (updated) {
			// Actually updated (found and updated) => 200 OK
			return Response.status(Status.OK).build();
		} else {
			// Not updated with no error => 404 not found
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Save (create or update) the given memberHumor.
	 * 
	 * @param memberHumor
	 *            memberHumor entity
	 * @return 200 if found and updated, 201 if not found and created
	 */
	@PUT
	@Consumes({ MediaType.APPLICATION_JSON })
	@Produces({ MediaType.APPLICATION_JSON })
	public Response save(MemberHumorRecord memberHumor) {
		logger.info("save()...");
		Status status = Status.OK; // 200 OK
		if (!memberHumorService.exists(memberHumor)) {
			status = Status.CREATED; // 201 CREATED
		}
		MemberHumorRecord record = memberHumorService.save(memberHumor);
		// Response ( code 200 or 201 )
		return Response.status(status).entity(record).build();
	}

	// ------------------------------------------------------------
	/**
	 * Delete a memberHumor.
	 * 
	 * @param memberId
	 *            memberId
	 * @param day
	 *            day
	 */
	@DELETE
	@Path("{memberId}/{day}")
	// @Consumes({MediaType.APPLICATION_JSON})
	// public void delete(@PathParam("memberId") Integer memberId, @PathParam("day")
	// Date day) {
	public Response delete(@PathParam("memberId") Integer memberId, @PathParam("day") Date day) {
		logger.info("delete(" + memberId + day + ")...");
		// memberHumorService.deleteById(memberId, day);
		boolean deleted = memberHumorService.deleteById(memberId, day);
		if (deleted) {
			// Actually deleted (found and deleted) => 204 "No Content" because no body in
			// the response
			return Response.status(Status.NO_CONTENT).build();
		} else {
			// Not deleted with no error => 404 "Not found"
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	@GET
	@Path("/memberHumors-list-items")
	@Produces({ MediaType.APPLICATION_JSON })
	public List<MemberHumorListItem> listItems() {
		logger.info("listItems()...");
		List<MemberHumorRecord> list = memberHumorService.findAll();
		List<MemberHumorListItem> items = new LinkedList<MemberHumorListItem>();
		for (MemberHumorRecord memberHumor : list) {
			items.add(new MemberHumorListItem(memberHumor));
		}
		return items;
	}

}
