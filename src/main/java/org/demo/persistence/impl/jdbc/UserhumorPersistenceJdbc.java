/*
 * Created on 2018-04-20 ( Date ISO 2018-04-20 - Time 11:46:50 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;


import org.demo.data.record.UserhumorRecord ;
import org.demo.persistence.UserhumorPersistence;
import org.demo.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * Userhumor persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("UserhumorPersistence")
public class UserhumorPersistenceJdbc extends GenericJdbcDAO<UserhumorRecord> implements UserhumorPersistence {

	private final static String SQL_SELECT_ALL = 
		"select ID, USER_ID, DAY, USERHUMORLEVEL from USERHUMOR"; 

	private final static String SQL_SELECT = 
		"select ID, USER_ID, DAY, USERHUMORLEVEL from USERHUMOR where ID = ?";

	private final static String SQL_INSERT = 
		"insert into USERHUMOR ( ID, USER_ID, DAY, USERHUMORLEVEL ) values ( ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update USERHUMOR set USER_ID = ?, DAY = ?, USERHUMORLEVEL = ? where ID = ?";

	private final static String SQL_DELETE = 
		"delete from USERHUMOR where ID = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from USERHUMOR";

	private final static String SQL_COUNT = 
		"select count(*) from USERHUMOR where ID = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public UserhumorPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(UserhumorRecord record, long value) {
		throw new IllegalStateException("Unexpected call to method 'setAutoIncrementedKey'");
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, UserhumorRecord userhumor) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, userhumor.getId() ) ; // "ID" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, UserhumorRecord userhumor) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, userhumor.getId() ) ; // "ID" : java.lang.Integer
		setValue(ps, i++, userhumor.getUserId() ) ; // "USER_ID" : java.lang.Integer
		setValue(ps, i++, userhumor.getDay() ) ; // "DAY" : java.util.Date
		setValue(ps, i++, userhumor.getUserHumorLevel() ) ; // "USERHUMORLEVEL" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, UserhumorRecord userhumor) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, userhumor.getUserId() ) ; // "USER_ID" : java.lang.Integer
		setValue(ps, i++, userhumor.getDay() ) ; // "DAY" : java.util.Date
		setValue(ps, i++, userhumor.getUserHumorLevel() ) ; // "USERHUMORLEVEL" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, userhumor.getId() ) ; // "ID" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param id;
	 * @return the new instance
	 */
	private UserhumorRecord newInstanceWithPrimaryKey( Integer id ) {
		UserhumorRecord userhumor = new UserhumorRecord();
		userhumor.setId( id );
		return userhumor ;
	}

	//----------------------------------------------------------------------
	@Override
	protected UserhumorRecord newInstance() {
		return new UserhumorRecord() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected UserhumorRecord populateBean(ResultSet rs, UserhumorRecord userhumor) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		userhumor.setId(rs.getInt("ID")); // java.lang.Integer
		if ( rs.wasNull() ) { userhumor.setId(null); }; // not primitive number => keep null value if any
		userhumor.setUserId(rs.getInt("USER_ID")); // java.lang.Integer
		if ( rs.wasNull() ) { userhumor.setUserId(null); }; // not primitive number => keep null value if any
		userhumor.setDay(rs.getDate("DAY")); // java.util.Date
		userhumor.setUserHumorLevel(rs.getString("USERHUMORLEVEL")); // java.lang.String
		return userhumor ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public UserhumorRecord findById( Integer id ) {
		UserhumorRecord userhumor = newInstanceWithPrimaryKey( id ) ;
		if ( super.doSelect(userhumor) ) {
			return userhumor ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public List<UserhumorRecord> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param userhumor
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( UserhumorRecord userhumor ) {
		return super.doSelect(userhumor) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param userhumor
	 */
	public long insert(UserhumorRecord userhumor) {
		super.doInsert(userhumor);
		return 0L ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public UserhumorRecord create(UserhumorRecord userhumor) {
		insert(userhumor);
		return userhumor ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean update(UserhumorRecord userhumor) {
		int r = super.doUpdate(userhumor);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public UserhumorRecord save(UserhumorRecord userhumor) {
		if ( super.doExists(userhumor) ) {
			super.doUpdate(userhumor);
		}
		else {
			super.doInsert(userhumor);
		}
		return userhumor ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean deleteById( Integer id ) {
		UserhumorRecord userhumor = newInstanceWithPrimaryKey( id ) ;
		int r = super.doDelete(userhumor);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean delete( UserhumorRecord userhumor ) {
		int r = super.doDelete(userhumor);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param id;
	 * @return
	 */
	// @Override
	public boolean exists( Integer id ) {
		UserhumorRecord userhumor = newInstanceWithPrimaryKey( id ) ;
		return super.doExists(userhumor);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param userhumor
	 * @return
	 */
	// @Override
	public boolean exists( UserhumorRecord userhumor ) {
		return super.doExists(userhumor);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
