/*
 * Created on 2018-04-23 ( Date ISO 2018-04-23 - Time 14:26:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.demo.data.record.MemberRecord ;
import org.demo.persistence.MemberPersistence;

/**
 * Generic test class for a persistence service
 * 
 * @author Telosys 
 *
 */
public class MemberPersistenceGenericTest {

	/**
	 * Generic test for a persistence service
	 * @param persistenceService
	 * @throws SQLException
	 */
	public void testPersistenceService(MemberPersistence persistenceService) {
    	System.out.println("--- test MemberPersistence ");

    	MemberRecord member = new MemberRecord();
		//--- Key values
		member.setId(Integer.valueOf(100)); // "ID" : java.lang.Integer
		//--- Other values
		member.setFirstname("AAAAAAAAAAAAAAAAAAAAAAAAA"); // "FIRSTNAME" : java.lang.String
		member.setLastname("AAAAAAAAAAAAAAAAAAAAAAAAA"); // "LASTNAME" : java.lang.String
		member.setPassword("AAAAAAAAAAAAAAAAAAAAAAAAA"); // "PASSWORD" : java.lang.String


    	//--- DELETE
    	System.out.println("Delete : " + member );
    	persistenceService.delete(member) ; // Just to be sure it doesn't exist before insert

		long initialCount = persistenceService.countAll() ;
    	System.out.println("Initial count = " + initialCount );

    	//--- CREATE
    	System.out.println("Create : " + member );

    	persistenceService.create(member);

    	assertTrue( persistenceService.exists(Integer.valueOf(100)) );

		assertTrue( persistenceService.exists(member) );
		long count = persistenceService.countAll() ;
    	System.out.println("Count = " + count );
		assertEquals(initialCount+1, count );

    	//--- FIND
    	System.out.println("Find by id..." );

    	MemberRecord member2 = persistenceService.findById(Integer.valueOf(100));

    	System.out.println("Found : " + member2 );
    	assertNotNull(member2);
		assertTrue( member2.getId().equals(Integer.valueOf(100)) ) ;
    	assertTrue( persistenceService.exists(member2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		member2.setFirstname("BBBBBBBBBBBBBBBBBBBBBBBBB"); // "FIRSTNAME" : java.lang.String
		member2.setLastname("BBBBBBBBBBBBBBBBBBBBBBBBB"); // "LASTNAME" : java.lang.String
		member2.setPassword("BBBBBBBBBBBBBBBBBBBBBBBBB"); // "PASSWORD" : java.lang.String
    	System.out.println("Update : " + member2 );
    	assertTrue( persistenceService.update(member2) );
    	
    	//--- RELOAD AFTER UPDATE
    	System.out.println("Find by id..." );

    	MemberRecord member3 = persistenceService.findById(Integer.valueOf(100));
    	assertNotNull(member3);
    	System.out.println("Found : " + member3 );

		// Check same data in the reloaded instance
		assertEquals(member2.getFirstname(), member3.getFirstname() ); 
		assertEquals(member2.getLastname(), member3.getLastname() ); 
		assertEquals(member2.getPassword(), member3.getPassword() ); 

    	//--- DELETE
    	System.out.println("Delete : " + member2 );
    	assertTrue( persistenceService.delete(member2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(member2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById(Integer.valueOf(100)) ); // Nothing (already deleted)

		long finalCount = persistenceService.countAll() ;
    	System.out.println("Final count = " + finalCount );
		assertEquals(initialCount, finalCount);

    	assertFalse( persistenceService.exists(Integer.valueOf(100)) ) ;
    	assertFalse( persistenceService.exists(member2) ) ;
    	member2 = persistenceService.findById(Integer.valueOf(100));
    	assertNull( member2 );
    	
    	System.out.println("Normal end of persistence service test." );
	}
}
