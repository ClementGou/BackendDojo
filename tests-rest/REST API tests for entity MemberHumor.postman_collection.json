{
	"info": {
		"_postman_id": "0039a847-7484-4cf2-a285-17c3f9ea7cdf",
		"name": "REST API tests for entity MemberHumor",
		"description": "PostMan tests originally generated by Telosys then updated",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "FIND ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is always 200 (a list is expected, void list if nothing) ",
							"tests[\"Status code is always 200\"] = ( responseCode.code === 200 ) ;",
							"",
							"if ( responseCode.code === 200 ) {",
							"// 200 OK (found) => Body expected in the response",
							"tests[\"Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"Has body\"] = responseBody ;",
							"tests[\"Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor"
					]
				},
				"description": "FIND ALL with GET method"
			},
			"response": []
		},
		{
			"name": "FIND ONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"tests[\"Status code is 200 or 404\"] = ( responseCode.code === 200 || responseCode.code === 404 ) ;",
							"",
							"if ( responseCode.code === 200 ) {",
							"// 200 OK (found) => Body expected in the response",
							"tests[\"200 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"200 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"200 => Has body\"] = responseBody ;",
							"tests[\"200 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",
							"if ( responseCode.code === 404 ) {",
							"// 404 NOT FOUND => No body expected in the response",
							"tests[\"404 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");",
							"tests[\"404 => No body\"] = ( ! responseBody ) ;",
							"}",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor/100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor",
						"100"
					]
				},
				"description": "FIND ONE with GET method"
			},
			"response": []
		},
		{
			"name": "CREATE HUMOR 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 201 or 409",
							"tests[\"Status code is 201 or 409\"] = ( responseCode.code === 201 || responseCode.code === 409 ) ;",
							"",
							"if ( responseCode.code === 201 ) {",
							"// 201 CREATED => Body expected in the response",
							"tests[\"201 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"201 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"201 => Has body\"] = responseBody ;",
							"tests[\"201 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",
							"if ( responseCode.code === 409 ) {",
							"// 409 CONFLICT => No body expected in the response",
							"tests[\"409 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");",
							"tests[\"409 => No body in response\"] = ( ! responseBody ) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":1, \n\t\"memberId\":2, \n\t\"day\":\"2001-05-09\", \n\t\"memberHumorLevel\":1\n}"
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor"
					]
				},
				"description": "CREATE with POST method"
			},
			"response": []
		},
		{
			"name": "CREATE HUMOR 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 201 or 409",
							"tests[\"Status code is 201 or 409\"] = ( responseCode.code === 201 || responseCode.code === 409 ) ;",
							"",
							"if ( responseCode.code === 201 ) {",
							"// 201 CREATED => Body expected in the response",
							"tests[\"201 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"201 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"201 => Has body\"] = responseBody ;",
							"tests[\"201 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",
							"if ( responseCode.code === 409 ) {",
							"// 409 CONFLICT => No body expected in the response",
							"tests[\"409 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");",
							"tests[\"409 => No body in response\"] = ( ! responseBody ) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":2, \n\t\"memberId\":2, \n\t\"day\":\"2001-05-09\", \n\t\"memberHumorLevel\":2\n}"
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor"
					]
				},
				"description": "CREATE with POST method"
			},
			"response": []
		},
		{
			"name": "CREATE HUMOR 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 201 or 409",
							"tests[\"Status code is 201 or 409\"] = ( responseCode.code === 201 || responseCode.code === 409 ) ;",
							"",
							"if ( responseCode.code === 201 ) {",
							"// 201 CREATED => Body expected in the response",
							"tests[\"201 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"201 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"201 => Has body\"] = responseBody ;",
							"tests[\"201 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",
							"if ( responseCode.code === 409 ) {",
							"// 409 CONFLICT => No body expected in the response",
							"tests[\"409 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");",
							"tests[\"409 => No body in response\"] = ( ! responseBody ) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":3, \n\t\"memberId\":3, \n\t\"day\":\"2018-04-05\", \n\t\"memberHumorLevel\":2\n}"
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor"
					]
				},
				"description": "CREATE with POST method"
			},
			"response": []
		},
		{
			"name": "CREATE HUMOR 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 201 or 409",
							"tests[\"Status code is 201 or 409\"] = ( responseCode.code === 201 || responseCode.code === 409 ) ;",
							"",
							"if ( responseCode.code === 201 ) {",
							"// 201 CREATED => Body expected in the response",
							"tests[\"201 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"201 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"201 => Has body\"] = responseBody ;",
							"tests[\"201 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",
							"if ( responseCode.code === 409 ) {",
							"// 409 CONFLICT => No body expected in the response",
							"tests[\"409 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");",
							"tests[\"409 => No body in response\"] = ( ! responseBody ) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":4, \n\t\"memberId\":4, \n\t\"day\":\"2018-04-05\", \n\t\"memberHumorLevel\":3\n}"
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor"
					]
				},
				"description": "CREATE with POST method"
			},
			"response": []
		},
		{
			"name": "CREATE HUMOR 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 201 or 409",
							"tests[\"Status code is 201 or 409\"] = ( responseCode.code === 201 || responseCode.code === 409 ) ;",
							"",
							"if ( responseCode.code === 201 ) {",
							"// 201 CREATED => Body expected in the response",
							"tests[\"201 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"201 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"201 => Has body\"] = responseBody ;",
							"tests[\"201 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",
							"if ( responseCode.code === 409 ) {",
							"// 409 CONFLICT => No body expected in the response",
							"tests[\"409 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");",
							"tests[\"409 => No body in response\"] = ( ! responseBody ) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":5, \n\t\"memberId\":4, \n\t\"day\":\"2018-04-05\", \n\t\"memberHumorLevel\":2\n}"
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor"
					]
				},
				"description": "CREATE with POST method"
			},
			"response": []
		},
		{
			"name": "CREATE HUMOR 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 201 or 409",
							"tests[\"Status code is 201 or 409\"] = ( responseCode.code === 201 || responseCode.code === 409 ) ;",
							"",
							"if ( responseCode.code === 201 ) {",
							"// 201 CREATED => Body expected in the response",
							"tests[\"201 => Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"201 => Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"201 => Has body\"] = responseBody ;",
							"tests[\"201 => Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							"",
							"if ( responseCode.code === 409 ) {",
							"// 409 CONFLICT => No body expected in the response",
							"tests[\"409 => Content-Length is ZERO\"] = responseHeaders[\"Content-Length\"].has(\"0\");",
							"tests[\"409 => No body in response\"] = ( ! responseBody ) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":5, \n\t\"memberId\":4, \n\t\"day\":\"2018-05-2\", \n\t\"memberHumorLevel\":2\n}"
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor"
					]
				},
				"description": "CREATE with POST method"
			},
			"response": []
		},
		{
			"name": "LIST-ITEMS",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is always 200 (a list is expected, void list if nothing) ",
							"tests[\"Status code is always 200\"] = ( responseCode.code === 200 ) ;",
							"",
							"if ( responseCode.code === 200 ) {",
							"// 200 OK (found) => Body expected in the response",
							"tests[\"Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"Has body\"] = responseBody ;",
							"tests[\"Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"}",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor/memberHumors-list-items",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor",
						"memberHumors-list-items"
					]
				},
				"description": "FIND ALL with GET method"
			},
			"response": []
		},
		{
			"name": "UPDATE ",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 404",
							"tests[\"Status code is 200 or 404\"] = ( responseCode.code === 200 || responseCode.code === 404 ) ;",
							"",
							"// No body in the response (in any case) ",
							"tests[\"No body in response\"] = ( ! responseBody ) ;",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":1, \n\t\"memberId\":1, \n\t\"day\":\"2001-05-09\", \n\t\"memberHumorLevel\":3\n}"
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor/100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor",
						"100"
					]
				},
				"description": "UPDATE with PUT method"
			},
			"response": []
		},
		{
			"name": "SAVE",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 200 or 201",
							"tests[\"Status code is 200 or 201\"] = ( responseCode.code === 200 || responseCode.code === 201 ) ;",
							"",
							"// 200 or 201 : Body always expected in the response",
							"tests[\"Has Content-Type\"] = responseHeaders.hasOwnProperty(\"Content-Type\");",
							"tests[\"Content-Type is application/json\"] = responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"tests[\"Has body\"] = responseBody ;",
							"tests[\"Body is valid JSON \"] = JSON.parse(responseBody) ;",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"id\":1, \n\t\"memberId\":2, \n\t\"day\":\"2012-12-12\", \n\t\"memberHumorLevel\":2\n}"
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor"
					]
				},
				"description": "SAVE with PUT method"
			},
			"response": []
		},
		{
			"name": "DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test if response code is 204 or 404",
							"tests[\"Status code is 204 or 404\"] = ( responseCode.code === 204 || responseCode.code === 404 ) ;",
							"",
							"// No body in the response (in any case) ",
							"tests[\"No body in response\"] = ( ! responseBody ) ;",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:8080/BackendDojo/api/v1/memberHumor/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"BackendDojo",
						"api",
						"v1",
						"memberHumor",
						"2"
					]
				},
				"description": "DELETE with DELETE method"
			},
			"response": []
		}
	]
}